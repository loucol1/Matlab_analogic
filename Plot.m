%% Import data from text file.
% Script for importing data from the following text file:
%
%    C:\Users\Sacha\OneDrive - UCL\EPL\Master\Q9\Analog\Project\Matlab\OTA_project_PSRR.txt
%
% To extend the code to different selected data or a different text file,
% generate a function instead of a script.

% Auto-generated by MATLAB on 2020/11/28 15:24:31

%% Initialize variables.
clear all;
close all;
filename_PSRR = 'C:\Users\Sacha\OneDrive - UCL\EPL\Master\Q9\Analog\Project\Matlab\OTA_project_PSRR.txt';
filename = 'C:\Users\Sacha\OneDrive - UCL\EPL\Master\Q9\Analog\Project\Matlab\OTA_project.txt';
filename_miller_psrr = 'C:\Users\Sacha\OneDrive - UCL\EPL\Master\Q9\Analog\Project\Matlab\OTA_project_miller_psrr.txt';
filename_miller_normal = 'C:\Users\Sacha\OneDrive - UCL\EPL\Master\Q9\Analog\Project\Matlab\OTA_project_miller_normal.txt';
startRow = 3;

%% Format for each line of text:
%   column1: double (%f)
%	column2: double (%f)
%   column3: double (%f)
% For more information, see the TEXTSCAN documentation.
formatSpec = '%17f%19f%f%[^\n\r]';

%% Open the text file.
fileID_PSRR = fopen(filename_PSRR,'r');
fileID = fopen(filename,'r');
fileID_miller_normal = fopen(filename_miller_normal);
fileID_miller_psrr = fopen(filename_miller_psrr);
%% Read columns of data according to the format.
% This call is based on the structure of the file used to generate this
% code. If an error occurs for a different file, try regenerating the code
% from the Import Tool.
dataArray_PSRR = textscan(fileID_PSRR, formatSpec, 'Delimiter', '', 'WhiteSpace', '', 'TextType', 'string', 'HeaderLines' ,startRow-1, 'ReturnOnError', false, 'EndOfLine', '\r\n');
dataArray = textscan(fileID, formatSpec, 'Delimiter', '', 'WhiteSpace', '', 'TextType', 'string', 'HeaderLines' ,startRow-1, 'ReturnOnError', false, 'EndOfLine', '\r\n');
dataArray_miller_normal = textscan(fileID_miller_normal, formatSpec, 'Delimiter', '', 'WhiteSpace', '', 'TextType', 'string', 'HeaderLines' ,startRow-1, 'ReturnOnError', false, 'EndOfLine', '\r\n');
dataArray_miller_psrr = textscan(fileID_miller_psrr, formatSpec, 'Delimiter', '', 'WhiteSpace', '', 'TextType', 'string', 'HeaderLines' ,startRow-1, 'ReturnOnError', false, 'EndOfLine', '\r\n');

%% Close the text file.
fclose(fileID_PSRR);
fclose(fileID);
fclose(fileID_miller_normal);
fclose(fileID_miller_psrr);
%% Post processing for unimportable data.
% No unimportable data rules were applied during the import, so no post
% processing code is included. To generate code which works for
% unimportable data, select unimportable cells in a file and regenerate the
% script.

%% Allocate imported array to column variable names
%% Current Buffer
frequency_PSRR = dataArray_PSRR{:, 1};
real_PSRR = dataArray_PSRR{:, 2};
im_PSRR = dataArray_PSRR{:, 3};
ADD = real_PSRR + 1i*im_PSRR;

frequency = dataArray{:, 1};
real_gain = dataArray{:, 2};
im_gain = dataArray{:, 3};
gain = real_gain + 1i*im_gain;

% figure
% semilogx(frequency_PSRR, 20*log10(abs(ADD)));
% title('ADD');
% 
% figure 
% semilogx(frequency, 20*log10(abs(gain)));
% title('Vout');

f1 = figure();
semilogx(frequency, 20*log10(abs(gain)./abs(ADD)));
xlim([0 17e6]);
title('PSRR - Current Buffer');
ylabel('PSRR [dB]');
xlabel('Frequency [Hz]');
saveas(f1, 'PSRR-current_buffer.png');
%% Miller OTA
frequency_miller_normal = dataArray_miller_normal{:, 1};
real_gain_miller_normal = dataArray_miller_normal{:, 2};
im_gain_miller_normal = dataArray_miller_normal{:, 3};
gain_miller_normal = real_gain_miller_normal + 1i*im_gain_miller_normal;

frequency_miller_psrr = dataArray_miller_psrr{:, 1};
real_gain_miller_psrr = dataArray_miller_psrr{:, 2};
im_gain_miller_psrr = dataArray_miller_psrr{:, 3};
add_miller_psrr = real_gain_miller_psrr + 1i*im_gain_miller_psrr;

% figure
% semilogx(frequency_miller_psrr, 20*log10(abs(add_miller_psrr)));
% title('ADD');
% 
% figure 
% semilogx(frequency_miller_normal, 20*log10(abs(gain_miller_normal)));
% title('Vout');

f2 = figure();
semilogx(frequency, 20*log10(abs(gain_miller_normal)./abs(add_miller_psrr)));
xlim([0 17e6]);
title('PSRR - Miller OTA');
ylabel('PSRR [dB]');
xlabel('Frequency [Hz]');
saveas(f2, 'PSRR-miller_OTA.png');

%% Clear temporary variables
clearvars filename startRow formatSpec fileID dataArray ans;




